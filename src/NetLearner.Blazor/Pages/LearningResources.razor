@page "/learningresources"
@page "/learningresources/{resourceListId:int}"

@using NetLearner.SharedLib.Data
@using NetLearner.SharedLib.Models
@using NetLearner.SharedLib.Services
@inject ILearningResourceService learningResourceService
@inject IResourceListService resourceListService
@inject IJSRuntime jsRuntime

<h1>Learning Resources</h1>

<p>This is a list of Learning Resources!</p>

@if (learningResources == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Url</th>
                <th>List</th>
                <th>Feed</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var learningResource in learningResources)
            {
            <tr>
                <td>@learningResource.Name</td>
                <td>
                    <a href="@learningResource.Url">Link</a>
                </td>
                <td>
                    <a href="javascript:void()" @onclick="(() => ShowItemsForList(learningResource.ResourceListId))"> @learningResource.ResourceList.Name</a>
                </td>
                <td>
                    <a href="@learningResource.ContentFeedUrl">RSS</a>
                </td>
                <td>
                    <AuthorizeView>
                        <Authorized Context="Auth">
                            <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(learningResource))" data-toggle="modal" data-target="#taskModal" value="Edit" />
                        </Authorized>
                    </AuthorizeView>
                </td>
                <td>
                    <AuthorizeView>
                        <Authorized Context="Auth">
                            <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(learningResource))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" />
                        </Authorized>
                    </AuthorizeView>
                </td>

            </tr>
            }
        </tbody>
    </table>
}
<div>
    <AuthorizeView>
        <Authorized Context="Auth">
            <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Add New Resource" @onclick="(() => InitializeLearningResourceObject())" />
        </Authorized>
    </AuthorizeView>

    <input type="button" class="btn btn-primary" value="All Resources" @onclick="(() => DataChanged())" />
</div>

<ConfirmDialog OnClick="@Delete" />
<ResourceDetail LearningResourceObject="learningResourceObject"
                ResourceListValues="ResourceLists"
                DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</ResourceDetail>

@code {
    List<LearningResource> learningResources;
    LearningResource learningResourceObject = new LearningResource();
    List<ResourceList> ResourceLists = new List<ResourceList>();
    string customHeader = string.Empty;

    [Parameter]
    public int? ResourceListId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ResourceListId != null) 
        {
            ShowItemsForList(Convert.ToInt32(ResourceListId));
        }
        else
        {
            learningResources = await learningResourceService.Get();
            ResourceLists = await resourceListService.Get();
        }
    }

    private void InitializeLearningResourceObject()
    {
        learningResourceObject = new LearningResource();
        learningResourceObject.ResourceList = new ResourceList();
        customHeader = "Add New Item";
    }

    private async void ShowItemsForList(int resourceListId)
    {
        learningResources = await learningResourceService.GetForList(resourceListId);
        ResourceLists = await resourceListService.Get();
        StateHasChanged();
    }

    private async void DataChanged()
    {
        learningResources = await learningResourceService.Get();
        ResourceLists = await resourceListService.Get();
        StateHasChanged();
    }
    private void PrepareForEdit(LearningResource learningResource)
    {
        customHeader = "Edit Item";
        learningResourceObject = learningResource;
    }

    private void PrepareForDelete(LearningResource learningResource)
    {
        learningResourceObject = learningResource;
    }

    private async Task Delete()
    {
        var task = await learningResourceService.Delete(learningResourceObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        learningResources = await learningResourceService.Get();
        learningResourceObject = new LearningResource();
        learningResourceObject.ResourceList = new ResourceList();
    }
}